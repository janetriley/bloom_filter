
Some cut-and-paste notes as I changed implementation.



#switched bits from boolean list to a bytearray:
#lookup dict dropped to ~1/3 N

============================= test session starts ==============================
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 4 items
test.py ....Counter({'False': 338882})
56 <- size of bloom (a couple pointers)
10485864 <- size of lookup dict
  400057 <- sys.getsizeof bits array




============================= test session starts ==============================
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 5 items
test.py .....Counter({'False': 338882})
size of filter: 56
size of lookup: 10485864
num bits needed: 377522
num bits set: 338882



# Added in md5 hash instead of returning self
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 6 items
test.py .....Counter({'False': 338882})
size of filter: 56
size of lookup: 10485864
num bitvector needed: 377522
num bitvector set: 338882

no improvement

# moving bit vector chunk size down to 100 instead of 1024 drops the bitvector size a bit:
============================= test session starts ==============================
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 6 items
test.py .....Counter({'False': 338882})
size of filter: 56
size of lookup: 10485864
num bitvector needed: 366812
num bitvector set: 338882
.


## changed digest to hexdigest and trimmed to last 5

platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 6 items
test.py .....Counter({'False': 289682, 'True': 49200})
size of filter: 56
size of lookup: 10485864
keys in lookup: 289682
num bitvector needed: 317462
num bitvector set: 289682
.

## use last 6 characters of hash:
============================= test session starts ==============================
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 6 items
test.py .....Counter({'False': 335489, 'True': 3393})
size of filter: 56
size of lookup: 10485864
keys in lookup: 335489
num bitvector needed: 357152
num bitvector set: 335489
.
338882


## At last - changed digest to hexdigest and trimmed to last 4

============================= test session starts ==============================
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 6 items
test.py .....Counter({'True': 273736, 'False': 65146})
size of filter: 56
size of lookup: 2621544
keys in lookup: 65146
num bitvector needed: 68635
num bitvector set: 65146
.                                                           [100%]                           [100%]

###### YEAH!! TWO HASHES OF [-2:] MUCH WAO AND EFFICIENCY

============================= test session starts ==============================
platform darwin -- Python 3.6.1, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: /Users/me/workspace/in_github/semantic_machines, inifile:
collected 6 items
test.py .....Counter({'True': 338692, 'False': 190})
size of filter: 56
size of lookup: 9320
keys in lookup: 256
sizeof bitvector needed: 1081
num bitvector set: 256
.